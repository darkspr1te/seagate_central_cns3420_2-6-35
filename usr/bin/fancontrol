#!/bin/sh

PIDFILE="/var/run/fancontrol.pid"

#DEBUG=1
MAX=255

#declare -i pwmval

LoadConfig() {
	echo "Loading configuration from $1 ..."
	if [ ! -r "$1" ]
	then
		echo "Error: Can't read configuration file"
		exit 1
	fi

	# grep configuration from file
	INTERVAL=`egrep '^INTERVAL=.*$' $1 | sed -e 's/INTERVAL=//g'`
	DEVPATH=`egrep '^DEVPATH=.*$' $1 | sed -e 's/DEVPATH= *//g'`
	DEVNAME=`egrep '^DEVNAME=.*$' $1 | sed -e 's/DEVNAME= *//g'`
	FCTEMPS=`egrep '^FCTEMPS=.*$' $1 | sed -e 's/FCTEMPS=//g'`
	MINTEMP=`egrep '^MINTEMP=.*$' $1 | sed -e 's/MINTEMP=//g'`
	MAXTEMP=`egrep '^MAXTEMP=.*$' $1 | sed -e 's/MAXTEMP=//g'`
	MINSTART=`egrep '^MINSTART=.*$' $1 | sed -e 's/MINSTART=//g'`
	MINSTOP=`egrep '^MINSTOP=.*$' $1 | sed -e 's/MINSTOP=//g'`
	# optional settings:
	FCFANS=`egrep '^FCFANS=.*$' $1 | sed -e 's/FCFANS=//g'`
	MINPWM=`egrep '^MINPWM=.*$' $1 | sed -e 's/MINPWM=//g'`
	MAXPWM=`egrep '^MAXPWM=.*$' $1 | sed -e 's/MAXPWM=//g'`

	# Check whether all mandatory settings are set
#	if [ -z ${INTERVAL} || -z ${FCTEMPS} || -z ${MINTEMP} || -z ${MAXTEMP} || -z ${MINSTART} || -z ${MINSTOP} ]
	if test -z ${INTERVAL} || test -z ${FCTEMPS} || test -z ${MINTEMP} || test -z ${MAXTEMP} || test -z ${MINSTART} || test -z ${MINSTOP}
	then
		echo "Some mandatory settings missing, please check your config file!"
		exit 1
	fi

	if [ "$INTERVAL" -le 0 ]
	then
		echo "Error in configuration file:"
		echo "INTERVAL must be at least 1"
		exit 1
	fi

	# write settings to arrays for easier use and print them
	echo
	echo "Common settings:"
	echo "  INTERVAL=$INTERVAL"
	
	fcv=$FCTEMPS
	if ! echo $fcv | egrep -q '='
	then
		echo "Error in configuration file:"
		echo "FCTEMPS value is improperly formatted"
		exit 1
	fi

	AFCPWM=`echo $fcv |cut -d'=' -f1`
	AFCTEMP=`echo $fcv |cut -d'=' -f2`
	AFCFAN=`echo $FCFANS |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	AFCMINTEMP=`echo $MINTEMP |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	AFCMAXTEMP=`echo $MAXTEMP |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	AFCMINSTART=`echo $MINSTART |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	AFCMINSTOP=`echo $MINSTOP |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	AFCMINPWM=`echo $MINPWM |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	[ -z "${AFCMINPWM}" ] && AFCMINPWM=0
	AFCMAXPWM=`echo $MAXPWM |sed -e 's/ /\n/g' |egrep "${AFCPWM}" |cut -d'=' -f2`
	[ -z "${AFCMAXPWM}" ] && AFCMAXPWM=255

	 verify the validity of the settings
	if [ "${AFCMINTEMP}" -ge "${AFCMAXTEMP}" ]
	then
		echo "Error in configuration file (${AFCPWM}):"
		echo "MINTEMP must be less than MAXTEMP"
		exit 1
	fi
	if [ "${AFCMAXPWM}" -gt 255 ]
	then
		echo "Error in configuration file (${AFCPWM}):"
		echo "MAXPWM must be at most 255"
		exit 1
	fi
	if [ "${AFCMINSTOP}" -ge "${AFCMAXPWM}" ]
	then
		echo "Error in configuration file (${AFCPWM}):"
		echo "MINSTOP must be less than MAXPWM"
		exit 1
	fi
	if [ "${AFCMINSTOP}" -lt "${AFCMINPWM}" ]
	then
		echo "Error in configuration file (${AFCPWM}):"
		echo "MINSTOP must be greater than or equal to MINPWM"
		exit 1
	fi
	if [ "${AFCMINPWM}" -lt 0 ]
	then
		echo "Error in configuration file (${AFCPWM}):"
		echo "MINPWM must be at least 0"
		exit 1
	fi

	echo
	echo "Settings for ${AFCPWM}:"
	echo "  Depends on ${AFCTEMP}"
	echo "  Controls ${AFCFAN}"
	echo "  MINTEMP=${AFCMINTEMP}"
	echo "  MAXTEMP=${AFCMAXTEMP}"
	echo "  MINSTART=${AFCMINSTART}"
	echo "  MINSTOP=${AFCMINSTOP}"
	echo "  MINPWM=${AFCMINPWM}"
	echo "  MAXPWM=${AFCMAXPWM}"
	echo
}

DevicePath()
{
	if [ -h "$1/device" ]
	then
		readlink -f "$1/device" | sed -e 's/^\/sys\///'
	fi
}

DeviceName()
{
	if [ -r "$1/name" ]
	then
		cat "$1/name" | sed -e 's/[[:space:]=]/_/g'
	elif [ -r "$1/device/name" ]
	then
		cat "$1/device/name" | sed -e 's/[[:space:]=]/_/g'
	fi
}

ValidateDevices()
{
	local OLD_DEVPATH="$1" OLD_DEVNAME="$2" outdated=0
	local entry device name path

	for entry in $OLD_DEVPATH
	do
		device=`echo "$entry" | sed -e 's/=[^=]*$//'`
		path=`echo "$entry" | sed -e 's/^[^=]*=//'`

		if [ "`DevicePath "$device"`" != "$path" ]
		then
			echo "Device path of $device has changed"
			outdated=1
		fi
	done

	for entry in $OLD_DEVNAME
	do
		device=`echo "$entry" | sed -e 's/=[^=]*$//'`
		name=`echo "$entry" | sed -e 's/^[^=]*=//'`

		if [ "`DeviceName "$device"`" != "$name" ]
		then
			echo "Device name of $device has changed"
			outdated=1
		fi
	done

	return $outdated
}

# Check that all referenced sysfs files exist
CheckFiles() {
	local outdated=0

		pwmo=${AFCPWM}
		if [ ! -w $pwmo ]
		then
			echo "Error: file $pwmo doesn't exist"
			outdated=1
		fi

		tsen=${AFCTEMP}
		if [ ! -r $tsen ]
		then
			echo "Error: file $tsen doesn't exist"
			outdated=1
		fi

		fan=${AFCFAN}
		if [ ! -r $fan ]
		then
			echo "Error: file $fan doesn't exist"
			outdated=1
		fi

	if [ $outdated -eq 1 ]
	then
		echo
		echo "At least one referenced file is missing. Either some required kernel"
		echo "modules haven't been loaded, or your configuration file is outdated."
		echo "In the latter case, you should run pwmconfig again."
	fi

	return $outdated
}

if [ -f "$1" ]
then
	LoadConfig $1
else
	LoadConfig /etc/fancontrol
fi

# Detect path to sensors
if echo "${AFCPWM}" | egrep -q '^/'
then
	DIR=/
elif echo "${AFCPWM}" | egrep -q '^hwmon[0-9]'
then
	DIR=/sys/class/hwmon
elif echo "${AFCPWM}" | egrep -q '^[1-9]*[0-9]-[0-9abcdef]{4}'
then
	DIR=/sys/bus/i2c/devices
else
	echo "$0: Invalid path to sensors"
	exit 1
fi

if [ ! -d $DIR ]
then
	echo $0: 'No sensors found! (did you load the necessary modules?)'
	exit 1
fi
cd $DIR

# Check for configuration change
if test -z "$DEVPATH" || test -z "$DEVNAME"
then
	echo "Configuration is too old, please run pwmconfig again"
	exit 1
fi
if ! ValidateDevices "$DEVPATH" "$DEVNAME"
then
	echo "Configuration appears to be outdated, please run pwmconfig again"
	exit 1
fi
CheckFiles || exit 1

if [ -f "$PIDFILE" ]
then
	echo "File $PIDFILE exists, is fancontrol already running?"
	exit 1
fi
echo $$ > "$PIDFILE"

# $1 = pwm file name
pwmdisable()
{
	ENABLE=${1}_enable
	# No enable file? Just set to max
	if [ ! -f $ENABLE ]
	then
		echo $MAX > $1
		return 0
	fi

	# Try pwmN_enable=0
	echo 0 > $ENABLE 2> /dev/null
	if [ `cat $ENABLE` -eq 0 ]
	then
		# Success
		return 0
	fi

	# It didn't work, try pwmN_enable=1 pwmN=255
	echo 1 > $ENABLE 2> /dev/null
	echo $MAX > $1
	if [ `cat $ENABLE` -eq 1 -a `cat $1` -ge 190 ]
	then
		# Success
		return 0
	fi

	# Nothing worked
	echo "$ENABLE stuck to" `cat $ENABLE` >&2
	return 1
}

# $1 = pwm file name
pwmenable()
{
	ENABLE=${1}_enable
	if [ -f $ENABLE ]
	then
		echo 1 > $ENABLE 2> /dev/null
		if [ $? -ne 0 ]
		then
			return 1
		fi
	fi
	echo $MAX > $1
}

restorefans()
{
	local status=$1
	echo 'Aborting, restoring fans...'
	pwmo=${AFCPWM}
	pwmdisable $pwmo
	echo 'Verify fans have returned to full speed'
	rm -f "$PIDFILE"
	exit $status
}

trap 'restorefans 0' SIGQUIT SIGTERM
trap 'restorefans 1' SIGHUP SIGINT

# main function
UpdateFanSpeeds() {
		#hopefully shorter vars will improve readability:
		pwmo=${AFCPWM}
		tsens=${AFCTEMP}
		fan=${AFCFAN}
		mint=$(expr $AFCMINTEMP \* 1000)
		maxt=$(expr $AFCMAXTEMP \* 1000)
		minsa=${AFCMINSTART}
		minso=${AFCMINSTOP}
		minpwm=${AFCMINPWM}
		maxpwm=${AFCMAXPWM}

		read tval < ${tsens}
		if [ $? -ne 0 ]
		then
			echo "Error reading temperature from $DIR/$tsens"
			restorefans 1
		fi

		read pwmpval < ${pwmo}
		if [ $? -ne 0 ]
		then
			echo "Error reading PWM value from $DIR/$pwmo"
			restorefans 1
		fi

		# If fanspeed-sensor output shall be used, do it
		if [[ -n ${fan} ]]
		then
			read fanval < ${fan}
			if [ $? -ne 0 ]
			then
				echo "Error reading Fan value from $DIR/$fan"
				restorefans 1
			fi
		else
			fanval=1  # set it to a non zero value, so the rest of the script still works
		fi

		# debug info
		if [ "$DEBUG" != "" ]
		then
			echo "pwmo=$pwmo"
			echo "tsens=$tsens"
			echo "fan=$fan"
			echo "mint=$mint"
			echo "maxt=$maxt"
			echo "minsa=$minsa"
			echo "minso=$minso"
			echo "minpwm=$minpwm"
			echo "maxpwm=$maxpwm"
			echo "tval=$tval"
			echo "pwmpval=$pwmpval"
			echo "fanval=$fanval"
		fi

		if [ $tval -le $mint ]
		  then pwmval=$minpwm # below min temp, use defined min pwm
		elif [ $tval -gt $maxt ]
		  then pwmval=$maxpwm # over max temp, use defined max pwm
		else
		  # calculate the new value from temperature and settings
		  let pwmval="(${tval}-${mint})*(${maxpwm}-${minso})/(${maxt}-${mint})+${minso}"
		  if [ $pwmpval -eq 0 -o $fanval -eq 0 ]
		  then # if fan was stopped start it using a safe value
		  	echo $minsa > $pwmo
			# Sleep while still handling signals
			sleep 1 &
			wait $!
		  fi
		fi

		echo $pwmval > $pwmo # write new value to pwm output
		if [ $? -ne 0 ]
		then
			echo "Error writing PWM value to $DIR/$pwmo"
			restorefans 1
		fi
		if [ "$DEBUG" != "" ]
		then
			echo "new pwmval=$pwmval"
		fi
}

echo 'Enabling PWM on fans...'
pwmo=${AFCPWM}
pwmenable $pwmo
if [ $? -ne 0 ]
then
	echo "Error enabling PWM on $DIR/$pwmo"
	restorefans 1
fi

echo 'Starting automatic fan control...'

# main loop calling the main function at specified intervals
while true
do
	UpdateFanSpeeds
	# Sleep while still handling signals
	sleep $INTERVAL &
	wait $!
done
